from selenium.webdriver.common.by import By

# ===============================
# Funci√≥n principal para probar URLs
# ===============================
def run_input_url_tests(driver):
    results = []
    inputs = driver.find_elements(By.CSS_SELECTOR, 'input[type="url"]')

    def describir_input(el, index):
        ph = el.get_attribute("placeholder")
        name = el.get_attribute("name")
        id_attr = el.get_attribute("id")
        if ph: return f'Input con placeholder "{ph}"'
        elif name: return f'Input con name="{name}"'
        elif id_attr: return f'Input con id="{id_attr}"'
        else: return f'Input[{index}] sin identificador'

    def probar_input(input_url, identificador):

        def test(nombre, funcion):
            try:
                mensaje, estado = funcion()
                results.append(f"[{estado}] {identificador} - {nombre}: {mensaje}")
            except Exception as e:
                results.append(f"[‚ùå] {identificador} - {nombre}: Error durante la prueba: {str(e)}")

        def url_valida():
            input_url.clear()
            input_url.send_keys("https://google.com")
            valor = input_url.get_attribute("value")
            return ("URL aceptada correctamente." if valor == "https://google.com"
                    else f"URL no aceptada. Valor: '{valor}'",
                    "‚úî" if valor == "https://google.com" else "‚ùå")

        def sin_protocolo():
            input_url.clear()
            input_url.send_keys("www.ejemplo.com")
            valor = input_url.get_attribute("value")
            return ("Falta protocolo. Valor no v√°lido.", "‚ùå") if not valor.startswith("http") else ("Acept√≥ sin protocolo", "‚ùó")

        def incompleta():
            input_url.clear()
            input_url.send_keys("https://")
            valor = input_url.get_attribute("value")
            return ("URL incompleta detectada.", "‚ùå") if valor == "https://" else ("Navegador modific√≥ la entrada.", "‚ùó")

        def caracteres_invalidos():
            input_url.clear()
            input_url.send_keys("https://<script>.com")
            valor = input_url.get_attribute("value")
            return ("Contiene caracteres inv√°lidos." if "<" in valor or ">" in valor else "No sanitiz√≥ caracteres.",
                    "‚ùó" if "<" in valor or ">" in valor else "‚úî")

        def vacio():
            input_url.clear()
            valor = input_url.get_attribute("value")
            return ("Campo vac√≠o permitido.", "‚ö†") if valor == "" else (f"No se vaci√≥ correctamente: '{valor}'", "‚ùå")

        def espacios():
            input_url.clear()
            input_url.send_keys("     ")
            valor = input_url.get_attribute("value")
            return ("Campo acepta solo espacios.", "‚ö†") if valor.strip() == "" else (f"Valor tras limpiar: '{valor}'", "‚ö†")

        def xss():
            input_url.clear()
            payload = '<script>alert(1)</script>'
            input_url.send_keys(payload)
            valor = input_url.get_attribute("value")
            return ("XSS sin sanitizar." if payload in valor else "XSS bloqueado o modificado.",
                    "‚ùó" if payload in valor else "‚úî")

        def sql():
            input_url.clear()
            payload = "https://malicioso.com/' OR '1'='1"
            input_url.send_keys(payload)
            valor = input_url.get_attribute("value")
            return ("SQL Injection posible." if payload in valor else "SQL Injection bloqueado.",
                    "‚ùó" if payload in valor else "‚úî")

        def largo():
            input_url.clear()
            texto = "https://" + "a" * 2000 + ".com"
            input_url.send_keys(texto)
            valor = input_url.get_attribute("value")
            if len(valor) >= len(texto): return "Acept√≥ URL muy larga.", "‚úî"
            elif 0 < len(valor) < len(texto): return f"Texto recortado. Largo final: {len(valor)}", "‚ö†"
            else: return "URL larga rechazada.", "‚ùå"

        def especiales():
            input_url.clear()
            input_url.send_keys("https://$&*(@!#).com")
            valor = input_url.get_attribute("value")
            return f"Caracteres especiales aceptados: '{valor}'", "‚úî"

        def comillas():
            input_url.clear()
            input_url.send_keys('"https://test.com"')
            valor = input_url.get_attribute("value")
            return f"Comillas aceptadas: '{valor}'", "‚úî"

        def emojis():
            input_url.clear()
            input_url.send_keys("https://üê±‚Äçüíª.com")
            valor = input_url.get_attribute("value")
            return f"Emojis aceptados: '{valor}'", "‚úî"

        def visibilidad_y_foco():
            visible = input_url.is_displayed()
            enabled = input_url.is_enabled()
            input_url.click()
            activo = driver.switch_to.active_element == input_url
            return f"Visible: {visible}, Enabled: {enabled}, Focus: {activo}", "‚úî" if visible and enabled and activo else "‚ö†"

        def atributos():
            datos = {
                "autocomplete": input_url.get_attribute("autocomplete"),
                "maxlength": input_url.get_attribute("maxlength"),
                "required": input_url.get_attribute("required"),
                "aria-label": input_url.get_attribute("aria-label"),
                "aria-required": input_url.get_attribute("aria-required"),
            }
            return f"Atributos detectados: {datos}", "‚úî"

        def shadow_dom():
            try:
                shadow = driver.execute_script("return arguments[0].shadowRoot", input_url)
                return ("Presente" if shadow else "No est√° en Shadow DOM", "‚ö†" if shadow else "‚úî")
            except:
                return "No accesible como Shadow DOM", "‚úî"

        def eventos_input_change():
            input_url.clear()
            input_url.send_keys("https://evento.com")
            driver.execute_script("arguments[0].dispatchEvent(new Event('input', { bubbles: true }))", input_url)
            driver.execute_script("arguments[0].dispatchEvent(new Event('change', { bubbles: true }))", input_url)
            return "Eventos input y change disparados.", "‚úî"

        # Ejecutamos todas las pruebas
        test("URL v√°lida", url_valida)
        test("Sin protocolo", sin_protocolo)
        test("Incompleta", incompleta)
        test("Caracteres inv√°lidos", caracteres_invalidos)
        test("Campo vac√≠o", vacio)
        test("Solo espacios", espacios)
        test("Inyecci√≥n XSS", xss)
        test("Inyecci√≥n SQL", sql)
        test("Texto largo", largo)
        test("Caracteres especiales", especiales)
        test("Uso de comillas", comillas)
        test("Emojis y Unicode", emojis)
        test("Visibilidad y foco", visibilidad_y_foco)
        test("Atributos comunes", atributos)
        test("Shadow DOM", shadow_dom)
        test("Eventos input/change", eventos_input_change)

    for idx, input_el in enumerate(inputs):
        identificador = describir_input(input_el, idx + 1)
        probar_input(input_el, identificador)

    print("\n=== RESULTADOS DE PRUEBA DE CAMPOS <input type='url'> ===\n")
    for r in results:
        print(r)

    return results
