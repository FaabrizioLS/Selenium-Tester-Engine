from selenium.webdriver.common.by import By

# ==============================================
# Funci√≥n principal para probar campos <textarea>
# ==============================================
def run_input_textarea_tests(driver):
    results = []
    textareas = driver.find_elements(By.TAG_NAME, "textarea")

    def describir_textarea(el, index):
        ph = el.get_attribute("placeholder")
        name = el.get_attribute("name")
        id_attr = el.get_attribute("id")
        if ph: return f'Textarea con placeholder "{ph}"'
        elif name: return f'Textarea con name="{name}"'
        elif id_attr: return f'Textarea con id="{id_attr}"'
        else: return f'Textarea[{index}] sin identificador'

    def probar_textarea(textarea, identificador):

        def test(nombre, funcion):
            try:
                mensaje, estado = funcion()
                results.append(f"[{estado}] {identificador} - {nombre}: {mensaje}")
            except Exception as e:
                results.append(f"[‚ùå] {identificador} - {nombre}: Error durante la prueba: {str(e)}")

        def texto_valido():
            textarea.clear()
            textarea.send_keys("Este es un comentario v√°lido.")
            valor = textarea.get_attribute("value")
            return ("Texto aceptado correctamente." if valor == "Este es un comentario v√°lido."
                    else f"Texto no aceptado. Valor: '{valor}'", "‚úî")

        def vacio():
            textarea.clear()
            valor = textarea.get_attribute("value")
            return ("Campo vac√≠o permitido." if valor == "" else f"No se vaci√≥ correctamente: '{valor}'", "‚ö†")

        def solo_espacios():
            textarea.clear()
            textarea.send_keys("    ")
            valor = textarea.get_attribute("value")
            return ("Campo acepta solo espacios." if valor.strip() == "" else f"Contiene: '{valor}'", "‚ö†")

        def texto_largo():
            texto = "a" * 1500
            textarea.clear()
            textarea.send_keys(texto)
            valor = textarea.get_attribute("value")
            if len(valor) >= 1500:
                return "Campo acept√≥ texto largo.", "‚úî"
            elif 0 < len(valor) < 1500:
                return f"Texto recortado. Largo final: {len(valor)}", "‚ö†"
            else:
                return "Texto largo rechazado.", "‚ùå"

        def salto_linea():
            texto = "Primera l√≠nea\nSegunda l√≠nea"
            textarea.clear()
            textarea.send_keys(texto)
            valor = textarea.get_attribute("value")
            return ("Saltos de l√≠nea aceptados." if "\n" in valor else "Saltos omitidos.", "‚úî")

        def xss():
            payload = "<script>alert(1)</script>"
            textarea.clear()
            textarea.send_keys(payload)
            valor = textarea.get_attribute("value")
            return ("XSS sin sanitizar." if payload in valor else "XSS bloqueado o modificado.",
                    "‚ùó" if payload in valor else "‚úî")

        def sql():
            payload = "' OR '1'='1"
            textarea.clear()
            textarea.send_keys(payload)
            valor = textarea.get_attribute("value")
            return ("SQL Injection posible." if payload in valor else "SQL Injection bloqueado.",
                    "‚ùó" if payload in valor else "‚úî")

        def especiales():
            textarea.clear()
            textarea.send_keys("!@#$%^&*()")
            valor = textarea.get_attribute("value")
            return f"Especiales aceptados: '{valor}'", "‚úî"

        def comillas():
            textarea.clear()
            textarea.send_keys('"comillas" \'dobles\'')
            valor = textarea.get_attribute("value")
            return f"Comillas aceptadas: '{valor}'", "‚úî"

        def emojis():
            textarea.clear()
            textarea.send_keys("Comentario üòäüëç con emojis üöÄ")
            valor = textarea.get_attribute("value")
            return f"Emojis aceptados: '{valor}'", "‚úî"

        def visibilidad_y_foco():
            visible = textarea.is_displayed()
            enabled = textarea.is_enabled()
            textarea.click()
            activo = driver.switch_to.active_element == textarea
            return f"Visible: {visible}, Enabled: {enabled}, Focus: {activo}", "‚úî" if visible and enabled and activo else "‚ö†"

        def atributos():
            datos = {
                "autocomplete": textarea.get_attribute("autocomplete"),
                "maxlength": textarea.get_attribute("maxlength"),
                "required": textarea.get_attribute("required"),
                "aria-label": textarea.get_attribute("aria-label"),
                "aria-required": textarea.get_attribute("aria-required"),
            }
            return f"Atributos detectados: {datos}", "‚úî"

        def shadow_dom():
            try:
                shadow = driver.execute_script("return arguments[0].shadowRoot", textarea)
                return ("Presente" if shadow else "No est√° en Shadow DOM", "‚ö†" if shadow else "‚úî")
            except:
                return "No accesible como Shadow DOM", "‚úî"

        def eventos_input_change():
            textarea.clear()
            textarea.send_keys("evento")
            driver.execute_script("arguments[0].dispatchEvent(new Event('input', { bubbles: true }))", textarea)
            driver.execute_script("arguments[0].dispatchEvent(new Event('change', { bubbles: true }))", textarea)
            return "Eventos input y change disparados.", "‚úî"

        test("Texto v√°lido", texto_valido)
        test("Campo vac√≠o", vacio)
        test("Solo espacios", solo_espacios)
        test("Texto largo", texto_largo)
        test("Saltos de l√≠nea", salto_linea)
        test("Inyecci√≥n XSS", xss)
        test("Inyecci√≥n SQL", sql)
        test("Caracteres especiales", especiales)
        test("Uso de comillas", comillas)
        test("Emojis y Unicode", emojis)
        test("Visibilidad y foco", visibilidad_y_foco)
        test("Atributos comunes", atributos)
        test("Shadow DOM", shadow_dom)
        test("Eventos input/change", eventos_input_change)

    for idx, textarea in enumerate(textareas):
        identificador = describir_textarea(textarea, idx + 1)
        probar_textarea(textarea, identificador)

    print("\n=== RESULTADOS DE PRUEBA DE CAMPOS <textarea> ===\n")
    for r in results:
        print(r)

    return results
